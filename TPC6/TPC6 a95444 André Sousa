{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e68cae81",
   "metadata": {},
   "outputs": [],
   "source": [
    "###################################\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import polinomio as pol\n",
    "\n",
    "#p1 =2x-5\n",
    "p1 = [(2,2),(-5,0)]\n",
    "x = [n for n in range(-100,100)]\n",
    "y=[]\n",
    "for n in x:\n",
    "    y.append(pol.calcPolinomio(p1,n))\n",
    "\n",
    "plt.plot(x, y)\n",
    "\n",
    "plt.ylim(-21,21)\n",
    "plt.xlim(-21,21)\n",
    "\n",
    "eixoXx=[x[0]-1,x[-1]]\n",
    "eixoXy=[0,0]\n",
    "\n",
    "eixoYx=[0,0]\n",
    "eixoYy=[-200,200]\n",
    "\n",
    "plt.plot(eixoXx, eixoXy, color='black', linestyle='dashed', linewidth = 2)\n",
    "plt.plot(eixoYx, eixoYy, color='black', linestyle='dashed', linewidth = 2)\n",
    " \n",
    "plt.xlabel('Abcissas')\n",
    "plt.ylabel('Ordenadas')\n",
    " \n",
    "# giving a title to my graph\n",
    "plt.title('O polinómio')\n",
    " \n",
    "# function to show the plot\n",
    "plt.show()\n",
    "\n",
    "#############################################################################################3\n",
    "\n",
    "def desenharPol(p):\n",
    "    #p1 =2x-5\n",
    "    x = [n for n in range(-100,100)]\n",
    "    y=[]\n",
    "    for n in x:\n",
    "        y.append(pol.calcPolinomio(p,n))\n",
    "\n",
    "    plt.plot(x, y)\n",
    "\n",
    "    plt.ylim(-21,21)\n",
    "    plt.xlim(-21,21)\n",
    "\n",
    "    eixoXx=[x[0]-1,x[-1]]\n",
    "    eixoXy=[0,0]\n",
    "\n",
    "    eixoYx=[0,0]\n",
    "    eixoYy=[-200,200]\n",
    "\n",
    "    plt.plot(eixoXx, eixoXy, color='black', linestyle='dashed', linewidth = 2)\n",
    "    plt.plot(eixoYx, eixoYy, color='black', linestyle='dashed', linewidth = 2)\n",
    " \n",
    "    plt.xlabel('Abcissas')\n",
    "    plt.ylabel('Ordenadas')\n",
    " \n",
    "# giving a title to my graph\n",
    "    plt.title('O polinómio')\n",
    " \n",
    "# function to show the plot\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "p=[]\n",
    "coef=0\n",
    "exp=0\n",
    "\n",
    "def criarTermo(coef, exp):\n",
    "    coef= int(input(\"Introduza o coefeciente que deseja:\"))\n",
    "    exp= int(input(\"Introduza o expoente que deseja:\"))\n",
    "    return((coef, exp))\n",
    "\n",
    "def criarTermoauto(coef, exp):\n",
    "    return((coef, exp))\n",
    "\n",
    "def criarPolinomio():\n",
    "    return( p )\n",
    "\n",
    "def inserirTermo(p,t):\n",
    "    p.append(t)\n",
    "    \n",
    "def verTermo(t):\n",
    "    c,e = t\n",
    "    if e==0:\n",
    "        return(str(c))\n",
    "    elif c==1:\n",
    "        return(\"x^\" + str(e))\n",
    "    else:\n",
    "        return(str(c) + \"x^\" + str(e))\n",
    "    \n",
    "def verPolinomio(p):\n",
    "    politexto = \"\"\n",
    "    if len(p)!=0:  \n",
    "            #politexto = verTermo(p[0])\n",
    "            for i in range (len(p)):\n",
    "                print(type(p[i][0]))\n",
    "                if p[i][0]>0:   #p[i] -> aceder à lista de todos os termos,  [0]-> aceder ao interior dos termos\n",
    "                    politexto = politexto + \"+\" + verTermo(p[i])\n",
    "                else:\n",
    "                    politexto = politexto + verTermo(p[i])\n",
    "    print(politexto)\n",
    "\n",
    "\n",
    "    \n",
    "def guardarPolinomio(p):\n",
    "    politexto = \"\"\n",
    "    if len(p)!=0:  \n",
    "            #politexto = verTermo(p[0])\n",
    "            for i in range (len(p)):\n",
    "                if int(p[i][0])>0:   #p[i] -> aceder à lista de todos os termos,  [0]-> aceder ao interior dos termos\n",
    "                    politexto = politexto + \"+\" + verTermo(p[i])\n",
    "                else:\n",
    "                    politexto = politexto + verTermo(p[i])\n",
    "    return(politexto)    \n",
    "\n",
    "\n",
    "\n",
    "def grauPolinomio(p):\n",
    "    grau = p[0][1]\n",
    "    for i in range(1, len(p)):\n",
    "        if p[i][1] > grau:\n",
    "            grau = p[i][1]\n",
    "    return grau\n",
    "\n",
    "def calcPolsodoprimeiro(p,x):\n",
    "    c= p[0][0]\n",
    "    e= p[0][1]\n",
    "    conta = c*(x**e)\n",
    "    return conta\n",
    "\n",
    "def calcPolcerto(p,x):\n",
    "    valor=0\n",
    "    for (c,e) in p:\n",
    "        valor += c*(x**e)\n",
    "    return valor\n",
    "\n",
    "\n",
    "def tabela(p, n):\n",
    "    for i in range(0,n):\n",
    "        print(str(i) + \" :: \" + str(calcPolcerto(p,i)))\n",
    "    return tabela\n",
    "#print(tabela(p1,10))\n",
    "\n",
    "\n",
    "def derivadaPol(p):\n",
    "    derivada= []\n",
    "    for c,e in p:\n",
    "        if e!=0:\n",
    "            c = c*e\n",
    "            e = e-1\n",
    "            derivada.append((c,e))\n",
    "        else:\n",
    "            c=0\n",
    "            e=0\n",
    "            derivada.append((c,e))\n",
    "    return derivada\n",
    "verPolinomio(derivadaPol(p1))\n",
    "\n",
    "def ordenarSimp(p):\n",
    "    #ordenar os elementos por expoente\n",
    "    simplificada=[]\n",
    "    simplificada=p\n",
    "    trocas=True\n",
    "    while(trocas):\n",
    "        trocas=False\n",
    "        for j in range (len(simplificada)-1):\n",
    "            if simplificada[j][1]>simplificada[j+1][1]:\n",
    "                simplificada[j], simplificada[j+1]=simplificada[j+1],simplificada[j]\n",
    "                trocas=True   \n",
    "                \n",
    "    #print(simplificada)\n",
    "    return simplificada\n",
    "\n",
    "def simplificar(simplificada):\n",
    "    i=0\n",
    "    while (i<len(simplificada)-1):\n",
    "        if simplificada[i][1]==simplificada[i+1][1]:\n",
    "            v=simplificada[i][0]+simplificada[i+1][0]\n",
    "            t=criarTermoauto(v,simplificada[i][1])\n",
    "            inserirTermo(simplificada,t)\n",
    "            simplificada.pop(i)\n",
    "            simplificada.pop(i)\n",
    "            simplificada=ordenarSimp(simplificada)\n",
    "            i=0\n",
    "        else:\n",
    "            i+=1\n",
    "    return simplificada\n",
    "\n",
    "    \"\"\"   for i in simplificada:\n",
    "        c= p[i][0]\n",
    "        c2=p[i+1][0]\n",
    "        e= p[i][1]\n",
    "        e2= p[i+1][1]\n",
    "        print(type(e))\n",
    "        if (e==e2):\n",
    "            polinomiofinal.append((c+c2,e))\n",
    "    return polinomiofinal\n",
    "        \"\"\"\n",
    "    \n",
    "def menu():\n",
    "    s=1\n",
    "    print(\n",
    "        \"\"\"\n",
    "        (1)Criar um polinómio\n",
    "        (2)Ver Polinómio\n",
    "        (3)Ver o grau do polinómio\n",
    "        (4)Calcular a derivada do polinómio\n",
    "        (5)Simplificar o polinómio\n",
    "        (6)Calcular polinómio num ponto\n",
    "        (7)Tabela\n",
    "        (8)Apagar polinómio\n",
    "        (9)Desenhar polinómio\n",
    "        (10)Sair\"\"\")\n",
    "        \n",
    "    while(s==1):\n",
    "            m=input(\"Qual operação deseja utilizar: \")\n",
    "            if(m==\"1\"):\n",
    "                semaforo=1\n",
    "                while semaforo==1:\n",
    "                    t=criarTermo(coef,exp)\n",
    "                    p=criarPolinomio()\n",
    "                    inserirTermo(p,t)\n",
    "                    semaforo = int(input(\"Já termionou o seu polinómio? Sim(0), Não(1)\"))\n",
    "            \n",
    "            if(m==\"2\"):\n",
    "                verPolinomio(p)\n",
    "            \n",
    "            if(m==\"3\"):\n",
    "                print(grauPolinomio(p))\n",
    "                \n",
    "            if(m==\"4\"):\n",
    "                print(verPolinomio(derivadaPol(p)))\n",
    "            \n",
    "            if(m==\"5\"):\n",
    "                print(simplificar(ordenarSimp(p)))\n",
    "            \n",
    "            if(m==\"6\"):\n",
    "                x=int(input(\"Introduza o valor do ponto: \"))\n",
    "                print(calcPolcerto(p,x))\n",
    "            \n",
    "            if(m==\"7\"):\n",
    "                n=int(input(\"Introduza até que número quer que vá a tabela: \"))\n",
    "                print(tabela(p, n))\n",
    "            \n",
    "            if(m==\"8\"):\n",
    "                p.clear()\n",
    "            \n",
    "            if(m==\"9\"):\n",
    "               desenharPol(p) \n",
    "            \n",
    "            if(m==\"10\"):\n",
    "                print(\"Obrigado por utilizar a aplicação.\")\n",
    "                s=0\n",
    "menu()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
