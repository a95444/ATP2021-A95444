{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5ed545c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "Lista=[]\n",
    "def criarFracao(numerador, denominador):\n",
    "    return (numerador, denominador)\n",
    "def verFracao(f):\n",
    "    n, d = f\n",
    "   # print(str(n) + \" / \" + str(d))\n",
    "\n",
    "f1 = criarFracao(2,3)\n",
    "#verFracao(f1)\n",
    "\n",
    "def mdc(a,b):\n",
    "    res=1\n",
    "    if a>b:\n",
    "        a,b=b,a\n",
    "    for i in range(2,a+1):\n",
    "        if(a%i == 0 and b%i == 0):\n",
    "            res = i\n",
    "    return res\n",
    "#print(mdc(125,1000))\n",
    "\n",
    "def mdc2(a,b):\n",
    "    if a<b:\n",
    "        return(mdc(b,a))\n",
    "    if a%b==0:\n",
    "        return b\n",
    "    elif a%b == 0:\n",
    "        return b\n",
    "    else:\n",
    "        return(mdc(a, a%b))\n",
    "\n",
    "def simplificarFracao(f):\n",
    "    n, d = f\n",
    "    mdc=mdc2(n, d)\n",
    "    return(int(n/mdc), int(d/mdc))\n",
    "\n",
    "verFracao(simplificarFracao(criarFracao(21,140)))\n",
    "\n",
    "f2=criarFracao(5,7)\n",
    "def somaFrac(f1,f2):\n",
    "    n1, d1= f1\n",
    "    n2, d2= f2\n",
    "    return(simplificarFracao((n1*d2 + n2*d1, d1*d2)))\n",
    "\n",
    "#verFracao(somaFrac(f1,f2))\n",
    "def subFrac(f1,f2):\n",
    "    n1, d1= f1\n",
    "    n2, d2= f2\n",
    "    return(simplificarFracao((n1*d2 - n2*d1, d1*d2)))\n",
    "\n",
    "def multFrac(f1,f2):\n",
    "    n1, d1= f1\n",
    "    n2, d2= f2\n",
    "    return(simplificarFracao((n1*n2, d1*d2)))\n",
    "\n",
    "def divFrac(f1,f2):\n",
    "    n1, d1= f1\n",
    "    n2, d2= f2\n",
    "    return(simplificarFracao((n1*d2, d1*n2)))\n",
    "\n",
    "def listaFacauto():\n",
    "    listinha2=[]\n",
    "    n=int(input(\"Quantas frações deseja criar? \"))\n",
    "    for i in range(1,n+1):\n",
    "        n1=random.randint(0,200)\n",
    "        d1=random.randint(0,200)\n",
    "        listinha2.append((n1,d1))\n",
    "    print(listinha2)\n",
    "    return listinha2\n",
    "\n",
    "\n",
    "\n",
    "def listaFacmanual():\n",
    "    listinha1=[]\n",
    "    n=int(input(\"Quantas frações deseja criar? \"))\n",
    "    a=1\n",
    "    s=1\n",
    "    while s==1:\n",
    "        for i in range(1,n+1):\n",
    "            n1=int(input(\"Introduza o numerador da fração número \" + str(i) + \": \"))\n",
    "            d1=int(input(\"Introduza o denominador da fração número: \" + str(i) + \": \"))\n",
    "            if(d1==0):\n",
    "                print(\"Fração inválida! Esta fração não será adicionada à Lista\")\n",
    "                s=0\n",
    "            else:\n",
    "                listinha1.append((n1,d1))\n",
    "                a+=1\n",
    "        #print(listinha)\n",
    "        return listinha1\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "def somaautoFrac(Lista):\n",
    "    soma=Lista[0]\n",
    "    for i in range(1,len(Lista)):\n",
    "        soma=somaFrac(soma,Lista[i])\n",
    "        #5print(\"OLÁ\", soma)\n",
    "    print(soma)\n",
    "#print (somaautoFrac())\n",
    "\n",
    "def subautoFrac(Lista):\n",
    "    sub=Lista[0]\n",
    "    for i in range(1,len(Lista)):\n",
    "        sub=subFrac(sub,Lista[i])\n",
    "        #5print(\"OLÁ\", soma)\n",
    "    print(sub)\n",
    "    \n",
    "def multautoFrac(Lista):\n",
    "    mult=Lista[0]\n",
    "    for i in range(1,len(Lista)):\n",
    "        mult=multFrac(mult,Lista[i])\n",
    "        #5print(\"OLÁ\", soma)\n",
    "    print(mult)\n",
    "    \n",
    "def divautoFrac(Lista):\n",
    "    div=Lista[0]\n",
    "    for i in range(1,len(Lista)):\n",
    "        div=divFrac(div,Lista[i])\n",
    "        #5print(\"OLÁ\", soma)\n",
    "    print(div)\n",
    "\n",
    "\n",
    "\n",
    "def menu():\n",
    "    s=1\n",
    "    print(\n",
    "        \"\"\"\n",
    "        (1)Criar Lista de frações Manual\n",
    "        (2)Criar Lista de frações Automática\n",
    "        (3)Ver Lista\n",
    "        (4)Limpar Lista\n",
    "        (5)Somar Frações\n",
    "        (6)Subtrair Frações\n",
    "        (7)Multiplicar Frações\n",
    "        (8)Dividir Frações\n",
    "        (9)Sair\"\"\")\n",
    "        \n",
    "    while(s==1):\n",
    "            m=input(\"Qual operação deseja utilizar: \")\n",
    "            if(m==\"1\"):\n",
    "                Lista = listaFacmanual()\n",
    "            elif(m==\"2\"):\n",
    "                Lista = listaFacauto()\n",
    "            elif(m==\"3\"):\n",
    "               print(Lista)\n",
    "            elif(m==\"4\"):\n",
    "               Lista.clear()\n",
    "            elif(m==\"5\"):\n",
    "                somaautoFrac(Lista)\n",
    "            elif(m==\"6\"):\n",
    "                subautoFrac(Lista)\n",
    "            elif(m==\"7\"):\n",
    "                multautoFrac(Lista)\n",
    "            elif(m==\"8\"):\n",
    "                divautoFrac(Lista)\n",
    "            elif(m==\"9\"):\n",
    "                print(\"Obrigado por utilizar a aplicação.\")\n",
    "                s=0\n",
    "            else:\n",
    "                print(\"Escolha um dos números correspondentes a uma operação\")\n",
    "                \n",
    "\n",
    "menu()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
